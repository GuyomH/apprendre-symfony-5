{% extends 'base.html.twig' %}

{% block title %}Comment créer un projet Symfony 5{% endblock %}

{% block main %}
    <h1>Comment créer un projet Symfony 5</h1>

    <h2>Installer quelques outils</h2>
    <p>Afin de développer un projet symfony 5, il convient d'installer tout d'abord les outils et logiciels suivants :</p>

    <ul>
        <li>Un <abbr title="Intergated Development Environment" lang="en">IDE</abbr> : <a href="https://www.jetbrains.com/fr-fr/phpstorm/download" target="_blank">PHP Storm</a> (payant) ou, <a href="https://code.visualstudio.com/download" target="_blank">Visual Studio Code</a> (gratuit), ou celui que vous préférez.</li>
        <li><a href="https://www.apachefriends.org/download.html" target="_blank"><abbr title="Hypertext Preprocessor" lang="en">PHP</abbr> & MariaDB</a></li>
        <li><a href="https://symfony.com/download" target="_blank">Symfony <abbr title="Command Line Interface" lang="en">CLI</abbr></a></li>
        <li><a href="https://getcomposer.org/download/" target="_blank">Composer</a></li>
        <li><a href="https://nodejs.org/en/download/" target="_blank">Node.js</a></li>
        <li><a href="https://classic.yarnpkg.com/en/docs/install/#windows-stable" target="_blank">Yarn</a></li>
        <li><a href="https://www.docker.com/get-started" target="_blank">Docker</a> (optionnel)</li>
        <li><a href="https://git-scm.com/downloads" target="_blank">Git</a></li>
    </ul>

    <h2>Vérifier la compatibilité du système</h2>
    <p>Ouvrir la ligne de commande et saisir le code suivant :  <kbd>symfony check:requirements</kbd></p>

    <p class="alert alert-primary"><i class="fa fa-paperclip"></i> Avant <b>Symfony 5</b> il fallait saisir <kbd>php bin/console &lt;commande_à_exécuter&gt;</kbd> au lieu de <kbd>symfony console &lt;commande_à_exécuter&gt;</kbd> pour accéder aux principales commandes du système.<br>Bien que la première méthode fonctionne toujours, il est conseillé d'utiliser la seconde qui à l'avantage d'être universelle.<br>&nbsp;<br>Il existe en fait 2 listes de commandes distinctes dont on peut avoir un aperçu via <kbd>symfony console list</kbd> et <kbd>symfony list</kbd> (où l'on retrouve notre commande <code>check:requirements</code>).</p>

    <h2>Créer un nouveau projet</h2>
    <p>Afin de créer un nouveau projet, ouvrir la ligne de commande et s'assurer d'être dans le bon répertoire.</p>

    <pre><code>
    # Code d'exemple
    C:\> <kbd>E:</kbd>
    E:\> <kbd>CD dev</kbd>
    E:\dev>
    </code></pre>

    <p>Une fois dans le répertoire choisi, saisir la commande suivante afin de créer un nouveau projet web : <code>E:\dev> <kbd>symfony new nom_du_projet --full</kbd></code></p>

    <h2>Initialiser GIT</h2>
    <p>Penser à se mettre dans le répertoire du projet : <code>E:\dev> <kbd>CD nom_du_projet</kbd></code> et saisir la commande <code>E:\dev\nom_du_projet> <kbd>git log</kbd></code> afin de vérifier que <b>Git</b> s'est bien initialisé et que le premier "commit" a bien été enregistré automatiquement.</p>

    <h2>Démarrer le serveur web</h2>
    <p>Pour lancer le serveur web, il suffit d'entrer la commande : <code>E:\dev\nom_du_projet> <kbd>symfony serve -d</kbd></code><br>puis de cliquer sur le lien généré <a href="https://127.0.0.1:8000/" target="_blank">https://127.0.0.1:8000/</a></p>

    <p class="alert alert-primary"><i class="fa fa-paperclip"></i> Pour arrêter le serveur, il suffit d'utiliser la commande <kbd>symfony server:stop</kbd></p>

    <h2>Installer Webpack</h2>
    <p><a href="https://flex.symfony.com/" target="_blank">Symfony Flex</a> nous apprend qu'il existe un package spécial de Webpack pour Symfony <a href="https://packagist.org/packages/symfony/webpack-encore-bundle" target="_blank">symfony/webpack-encore-bundle</a></p>
    <p>Pour télécharger ce bundle, exécuter la commande : <code>E:\dev\nom_du_projet> <kbd>composer require encore</kbd></code></p>
    <p>Exécuter la commande yarn (yarn est l'équivalent de composer pour node.js) suivante afin d'installer les dépendances de Webpack : <code>E:\dev\nom_du_projet> <kbd>yarn install</kbd></code></p>
    <p>Un répertoire <b>assets</b> est créé à la racine du projet et un autre nommé <b>build</b> l'est dans <b>public</b>.</p>
    <p>Pour utiliser webpack, il suffit developper son <abbr title="Cascading Style Sheet" lang="en">CSS</abbr> dans le fichier <b>assets/css/app.css</b> et son javascript dans <b>assets/js/app.js</b> (voir cours sur <a href="https://symfonycasts.com/screencast/webpack-encore" target="_blank">Webpack Encore</a>)</p>
    <p>Pour lancer la compilation automatique des fichiers <b>app.css</b> et <b>app.js</b>, il suffit de lancer la commande : <code>E:\dev\nom_du_projet> <kbd>yarn watch</kbd></code></p>
    <p>Pour intégrer le code compilé à notre projet, ouvrir le ficher <b>base.html.twig</b> du répertoire <b>template</b> et remplacer toutes les lignes du bloc <b>stylesheets</b> par <code>&#123;&#123; encore_entry_link_tags('app') &#125;&#125;</code> et celles du bloc <b>javascripts</b> par <code>&#123;&#123; encore_entry_script_tags('app') &#125;&#125;</code></p>

    <pre><code>
    <b>templates/base.html.twig</b>

    # Résultat
    &#123;&#37; block stylesheets &#37;&#125;
        &#123;&#123; encore_entry_link_tags('app') &#125;&#125;
    &#123;&#37; endblock &#37;&#125;

    &#123;&#37; block javascripts &#37;&#125;
        &#123;&#123; encore_entry_script_tags('app') &#125;&#125;
    &#123;&#37; endblock &#37;&#125;
    </code></pre>

    <p>Pour ajouter la librairie <b>jQuery</b> il suffit de lancer la commande : <code>E:\dev\nom_du_projet> <kbd>yarn add jquery</kbd></code> et de dé-commenter la ligne <code><kbd>import $ from 'jquery';</kbd></code> du fichier <b>app.js</b></p>
    <p>L'ajout de <b>Bootstrap</b> suis la même logique avec la commande : <code>E:\dev\nom_du_projet> <kbd>yarn add bootstrap</kbd></code> et l'ajout à la première ligne du code <code><kbd>@import "~bootstrap";</kbd></code> dans le fichier <b>app.css</b></p>
    <p>Dans le cadre de ce projet, <b>jQuery</b> et <b>Bootstrap</b> ont été ajoutés de manière "traditionnelle" via le <a href="https://getbootstrap.com/docs/4.5/getting-started/introduction/" target="_blank"><abbr title="Content Delivery Netrwork">CDN</abbr> officiel</a>.</p>

    <h2>Sauvegarder son travail</h2>
    <p>Grâce à Git il est possible de sauvegarder son travail de manière incrémentale. A chaque fois que l'on termine une modification à notre code, il faut l'enregistrer dans git de la façon suivante :</p>
    <ul>
        <li>Vérifier les fichiers modifiés et/ou ajoutés : <code>E:\dev\nom_du_projet> <kbd>git status</kbd></code></li>
        <li>Si la commande précédente indique ce message d'erreur <b>fatal: not a git repository</b>, il faut initialiser <b>git</b> : <code>E:\dev\nom_du_projet> <kbd>git init</kbd></code></li>
        <li>Ajouter tous les nouveaux fichiers dans git (La directive .gitignore inclue dans le projet empêche l'ajout des fichiers non pertinents) : <code>E:\dev\nom_du_projet> <kbd>git add *</kbd></code></li>
        <li>Commiter les changements : <code>E:\dev\nom_du_projet> <kbd>git commit -m "Message d'explication du commit"</kbd></code></li>
        <li>Vérifier le commit : <code>E:\dev\nom_du_projet> <kbd>git log</kbd></code></li>
        <li>Envoyer le code vers GitHub : <code>E:\dev\nom_du_projet> <kbd>git push</kbd></code></li>
    </ul>

    <p>Afin de profiter pleinement de <b>Git</b>, il est recommandé lorsqu'on créer un nouveau projet, de sauvegarder et de synchroniser son répertoire de travail avec un service comme <b>GitHub</b>.</p>
{% endblock %}
{% extends 'base.html.twig' %}

{% block title %}Symfony 5 et les bases de données{% endblock %}

{% block main %}
    <h1>Symfony 5 et les bases de données</h1>

    <h2>Créer et associer une base de données</h2>

    <p>Pour associer une base de données à <b>Symfony</b>, il suffit en théorie d'ouvrir le fichier <b>.env</b> à la racine du projet et de renseigner la ligne <code>DATABASE_URL=</code><br>Dans un premier temps, il est intéressant de séparer le <b>DEV</b> de la <b>PROD</b> en créant à la racine du projet le fichier <b>.env.local</b> qui sera ignoré par <b>GIT</b> (donc ignoré à chaque commit) et dont les valeurs seront prioritaires sur le fichier <b>.env</b> dans un contexte de <b>DEV</b>.</p>

    <p>Il faut donc créer le fichier <b>.env.local</b> et y renseigner la ligne suivante :</p>

    <pre><code>
    # DATABASE_URL=mysql://utilisateur:mot_de_passed@url:numero_du_port/nom_de_la_base?serverVersion=version_du_serveur_facultatif
    # La ligne ci-dessous fonctionnera directement si vous avez une configuration par défaut sans mot de passe.
    DATABASE_URL=mysql://root:@127.0.0.1:3306/learning_symfony
    </code></pre>


     <p>Une fois cela fait, il faut créer une base de données vierge via le l'onglet <b><abbr title="Seach Query Language">SQL</abbr></b> de <b>phpMyAdmin</b>, ou le <a href="https://stackoverflow.com/questions/698914/how-can-i-access-the-mysql-command-line-with-xampp-for-windows" target="_blank" title="Ouvrir le client MySQL/MariaDB avec XAMPP pour Windows">client <b>MySQL/MariaDB</b></a> :</p>

    <pre><code>
    -- Création de la base de donnée "learning_symfony" avec l'encodage UTF8mb4
    CREATE DATABASE learning_symfony CHARACTER SET UTF8mb4 COLLATE utf8mb4_general_ci;
    </code></pre>

    <p>Il existe également une méthode plus simple pour créer notre base de données qui consiste à utiliser la commande <kbd>symfony console doctrine:database:create</kbd></p>

    <h2>Ajouter des entités à la base de données</h2>

    <p>Dans un contexte standard, après avoir créé une base de données, on lui ajoute des tables qu'on manipule avec un langage de type <b><abbr title="Search Query Language">SQL</abbr></b>.<br>Avec <b>Symfony</b> cependant, on utilise un <b><abbr title="Object Relational Mapping">ORM</abbr></b> nommée <a href="https://www.doctrine-project.org/projects/doctrine-orm/en/current/tutorials/getting-started.html" target="_blank"><b>Doctrine</b></a>, ce qui signifie que si en arrière plan on utilise toujours des <b>tables</b> et le langage <b><abbr title="Search Query Language">SQL</abbr></b>, au niveau du framework, on les remplace par des <b>entités</b>, et le  langage <b><abbr title="Doctrine Query Language">DQL</abbr></b>.</p>

    <p>Une fois la base de données créée, il faut commencer à générer nos entités qui sont en fait des <b>classes</b> composées de <b>propriétés</b> qui correspondent respectivement à nos <b>tables</b> et à leurs <b>colonnes</b> en <b><abbr title="Search Query Language">SQL</abbr></b>.</p>

    <p>Afin d'avoir un aperçu de la création d'entités et de l'utilisation du <b><abbr title="Doctrine Query Language">DQL</abbr></b> dans le cadre d'un modèle relationnel simple, prenons l'exemple d'une base de données très simplifiée sur le cinéma qui nous permet de connaître le réalisateur et les acteurs d'un film.<br>On part du postulat suivant :</p>

    <ul>
        <li>Plusieurs films peuvent être réalisés par un seul réalisateur</li>
        <li>Un réalisateur peut réaliser plusieurs films</li>
        <li>Plusieurs films peuvent recevoir la participation de plusieurs acteurs</li>
        <li>Plusieurs acteurs peuvent participer à plusieurs films</li>
    </ul>

    <p>Cela nous donne le modèle conceptuel suivant :</p>
    <div class="text-center my-5"><img src="{{ asset('images/mcd.svg') }}" alt="Modèle Conceptuel de Données" class="img-fluid"></div>

    <p>Il nous faut créer 3 entités nommées Film, Acteur et Realisateur.<br>Grâce au <b>maker bundle</b> nouds pouvons réaliser cela grâce à la commande <kbd>symfony console make:entity</kbd> dont voici l'ensemble des étapes pour l'entité <b>Film</b> :</p>

    <pre><code>
    symfony console make:entity

    Class name of the entity to create or update (e.g. VictoriousPizza):
    > Film

    created: src/Entity/Film.php
    created: src/Repository/FilmRepository.php

    Entity generated! Now let's add some fields!
    You can always add more fields later manually or by re-running this command.

    New property name (press &lt;return&gt; to stop adding fields):
    > titre

    Field type (enter ? to see all types) [string]:
    >

    Field length [255]:
    >

    Can this field be null in the database (nullable) (yes/no) [no]:
    >

    updated: src/Entity/Film.php

    Add another property? Enter the property name (or press &lt;return&gt; to stop adding fields):
    >

    Success!

    Next: When you're ready, create a migration with symfony console make:migration
    </code></pre>

    <p class="alert alert-primary"><i class="fa fa-paperclip"></i> Il est possible d'associer une base de données qui contient déjà des tables (peuplées ou non) et de demander à symfony de <a href="https://symfony.com/doc/current/doctrine/reverse_engineering.html" target="_blank">convertir</a> le tout en entités expoitables par l'<abbr title="Object Relational Mapping">ORM</abbr>.</p>

    <p>Il n'y a pas eu besoin de créer la propriété <b>id</b> car cela se fait automatiquement.</p>

    <p>A chaque fois que l'on créer une nouvelle entité, un nouveau fichier du même nom que l'entité est créé dans le repertoire <b>src/Entity</b> (src/Entity/Film.php), ainsi qu'un second suffixé de <b>Repository</b> dans <b>src/Repository</b> (src/Repository/FilmRepository.php).</p>

    <p class="alert alert-warning"><b>TODO :</b> Créer les entités <b>Realisateur</b> et <b>Acteur</b> avec la propriété <b>nom</b> pour chacune d'entre elles.<br>Dans les deux cas, <b>nom</b> est une chaîne de caractère de 255 caractères non nulle.</p>

      <h2>Mettre en place les relations entre entités</h2>

    <p>Une fois nos trois entités créées, et avant de faire la migration, il faut indiquer à l'<b><abbr title="Object Relational Mapping">ORM</abbr></b> les relations entre les entités.<br><b>Doctrine</b> gère les types de relations suivants :</p>

    <div class="container">
        <div class="row">
            <ul class="col-sm-12 col-md-6">
                <li><b>OneToOne</b> (1 à 1)<div><img src="{{ asset('images/one_to_one.svg') }}" alt="Relation one to one" class="img-fluid"></div></li>
                <li><b>OneToMany</b> (1 à plusieurs)<div class="my-5"><img src="{{ asset('images/one_to_many.svg') }}" alt="Relation one to many" class="img-fluid"></div></li>
            </ul>
            <ul class="col-sm-12 col-md-6">
                <li><b>ManyToOne</b> (Plusieurs à 1)<div class="my-5"><img src="{{ asset('images/many_to_one.svg') }}" alt="Relation many to one" class="img-fluid"></div></li>
                <li><b>ManyToMany</b> (Plusieurs à plusieurs)<div class="my-5"><img src="{{ asset('images/many_to_many.svg') }}" alt="Relation many to many" class="img-fluid"></div></li>
            </ul>
        </div>
    </div>

    <p>La relation entre 2 entités doit être pensée de manière bidirectionnelle (ce qui justifie l'existence de la relation OneToMany et ManyToOne), ce qui nous donne les relations suivantes pour nos 3 entités :</p>

    <ul>
        <li><b>Film → Realisateur = ManyToOne</b> (Plusieurs films peuvent avoir le même réalisateur)</li>
        <li><b>Realisateur → Film = OneToMany</b> (Un réalisateur peut réaliser plusieurs films)</li>
        <li><b>Film → Acteur = ManyToMany</b> (Plusieurs films peuvent avoir les mêmes acteurs)</li>
        <li><b>Acteur → Film = ManyToMany</b> (Plusieurs acteurs peuvent jouer dans plusieurs mêmes films)</li>
    </ul>

    <p>Toujours grâce à la commande <kbd>symfony console make:entity &lt;Nom_de_l_entité&gt;</kbd>, on peut ajouter nos relations.<br>Voici les étapes à suivre pour lier les entités <b>Film</b> et <b>Realisateur</b> :</p>

    <pre><code>
    symfony console make:entity Film

    Your entity already exists! So let's add some new fields!

    New property name (press &lt;return&gt; to stop adding fields):
    > realisateur

    Field type (enter ? to see all types) [string]:
    > ManyToOne

    What class should this entity be related to?:
    > Realisateur

    Is the Film.realisateurs property allowed to be null (nullable)? (yes/no) [yes]:
    >

    Do you want to add a new property to Realisateur so that you can access/update Film objects from it
    - e.g. $realisateur->getFilms()? (yes/no) [yes]:
    >

    A new property will also be added to the Realisateur class so that you can access the related Film objects from it.

    New field name inside Realisateur [films]:
    >

    updated: src/Entity/Film.php
    updated: src/Entity/Realisateur.php

    Add another property? Enter the property name (or press &lt;return&gt; to stop adding fields):
    >

    Success!

    Next: When you're ready, create a migration with symfony console make:migration
    </code></pre>

    <p>On note que pour mettre en place notre relation, on crée une propriété <b>realisateur</b> qui sert de lien avec l'entité <b>Film</b> afin de pouvoir récupérer ou créer un nom à partir de celle-ci.</p>



    <p>À la question <b><i>"Do you want to add a new property to Realisateur so that you can access/update Film objects from it"</i></b>, on répond <b>Oui</b> par défaut afin de rendre la relation bidirectionnelle. Cela a pour effet la création d'une propriété <b>films</b> au sein de l'entité <b>Realisateur</b>.<br>Un réalisateur ayant la possibilité de réaliser plusieurs films, cette propriété est initialisée en tant que tableau via le constucteur de la classe :</p>

    <pre><code>
    class Realisateur
    {
        // ...

         /**
         * @ORM\OneToMany(targetEntity=Film::class, mappedBy="realisateur")
         */
        private $films;

        public function __construct()
        {
            $this->films = new ArrayCollection();
        }

        // ...
    }
    </code></pre>

    <p>Autre point, la propriété <b>films</b> étant un tableau rempli d'instances de la classe <b>Film</b>, elle ne fait pas l'objet d'un <b>setter</b>, mais d'un <b>adder</b> et d'un <b>remover</b> dont le rôle est de gérer l'ajout ou la suppression des entités <b>Film</b> à l'intérieur de la propriété :</p>

    <pre><code>
    class Realisateur
    {
        // ...

         /**
         * @return Collection|Film[]
         */
        public function getFilms(): Collection
        {
            return $this->films;
        }

        public function addFilm(Film $film): self
        {
            if (!$this->films->contains($film)) {
                $this->films[] = $film;
                $film->setRealisateur($this);
            }

            return $this;
        }

        public function removeFilm(Film $film): self
        {
            if ($this->films->contains($film)) {
                $this->films->removeElement($film);
                // set the owning side to null (unless already changed)
                if ($film->getRealisateur() === $this) {
                    $film->setRealisateur(null);
                }
            }

            return $this;
        }
    }
    </code></pre>

    <p class="alert alert-warning"><b>TODO :</b> Créer la relation <b>ManyToMany</b> entre <b>Film</b> et <b>Acteur</b>.</p>

    <h2>Effectuer la migration</h2>

    <p>La mise en place de nos entités et nos relations terminée, il ne reste plus qu'à effectuer la migration qui s'opère en 2 temps :</p>
    <ul>
        <li>Une première fois au niveau de <b>Symfony</b> : <kbd>symfony console make:migration</kbd></li>
        <li>Une seconde fois au niveau de <b>Doctrine</b> : <kbd>symfony console doctrine:migrations:make</kbd> ou <kbd>symfony console d:m:m</kbd> en abrégé.</li>
    </ul>

    <p>Si tout se passe bien, les tables suivantes sont créées au niveau de la base de données :</p>
    <div class="text-center my-5"><img src="{{ asset('images/migration.png') }}" alt="Tables dans la base de données après migration" class="img-fluid"></div>

    <h2>Remplir la base avec un jeu de données</h2>

    <p>Afin de remplir la base avec quelques exemples, voici un jeu de données au format <abbr title="Search Query Language">SQL</abbr> prêt à être executé dans <b>PhpMyAdmin</b> avec un simple copier/coller du code ci-dessous dans l'onglet <abbr title="Search Query Language">SQL</abbr> :</p>

    <pre><code>
    --
    -- Déchargement des données de la table `acteur`
    --

    INSERT INTO `acteur` (`id`, `nom`) VALUES
    (1, 'Bruce Willis'),
    (2, 'Dolf Lundgren'),
    (3, 'Sylvester Stallone');

    --
    -- Déchargement des données de la table `realisateur`
    --

    INSERT INTO `realisateur` (`id`, `nom`) VALUES
    (1, 'John McTiernan'),
    (2, 'Simon West'),
    (3, 'Ted Kotcheff'),
    (4, 'Peter Jackson'),
    (5, 'Steven Spielberg'),
    (6, 'George Lucas');

    --
    -- Déchargement des données de la table `film`
    --

    INSERT INTO `film` (`id`, `realisateur_id`, `titre`) VALUES
    (1, 2, 'Expendables 2'),
    (2, 1, 'Les Maîtres de l\'Univers'),
    (3, 1, 'Piège de Cristal'),
    (4, 3, 'Rambo'),
    (5, 3, 'Rocky IV');

    --
    -- Déchargement des données de la table `film_acteur`
    --

    INSERT INTO `film_acteur` (`film_id`, `acteur_id`) VALUES
    (1, 1),
    (1, 2),
    (1, 3),
    (2, 2),
    (3, 1),
    (4, 3),
    (5, 2),
    (5, 3);
    </code></pre>

    <div class="text-center my-5"><img src="{{ asset('images/insert_into_db.png') }}" alt="Insertion des données dans la base via PhpMyAdmin" class="img-fluid"></div>

    <h2>Afficher les données</h2>

    <p>Maintenant que le jeu de données a été chargé, il ne reste plus qu'à afficher la liste des films avec le nom du réalisateur et des acteurs sous forme de tableau.</p>

    <p>Lorsque nous avons créé l'entité <b>Film</b>, une classe complémentaire nommée <b>FilmRepository</b> l'a été également.<br>Le rôle de cette classe est de nous permettre d'interroger la table <b>film</b> de notre base via le langage <b><abbr title="Doctrine Query Language">DQL</abbr></b>.<br>La première étape consiste donc à importer le <b>FilmRepository</b> dans le <b>contrôleur</b> de la page où nous souhaitons afficher les informations :</p>

    <pre><code>
     /**
     * @Route("/db", name="db")
     */
    public function db(<b>FilmRepository $filmRepository</b>)
    {
        // ...
    }
    </code></pre>

    <p>Cette méthode d'importation s'appelle <b>l'injection de dépendances</b>, elle consiste à utiliser le <b>type hinting</b> ou <b>déclaration de type</b> pour importer l'instance de la classe que nous souhaitons utiliser (<b>FilmRepository</b>) représentée par une variable (<b>$filmRepository</b>) qui va nous permettre de la manipuler au sein de notre fonction.</p>

    <p class="alert alert-danger"><b>ATTENTION :</b> Hors contexte de l'injection de dépendance, le <a href="https://www.php.net/manual/fr/functions.arguments.php#functions.arguments.type-declaration" target="_blank">type hinting</a> sert uniquement à vérifier que le paramètre ou la valeur retournée par une fonction correspond bien au type déclaré.</p>

    <p>Alternativement, on peut accéder au <b>FilmRepository</b> via l'objet <b>EntityManagerInterface</b> de la façon suivante :</p>

    <pre><code>
     /**
     * @Route("/db", name="db")
     */
    public function db(<b>EntityManagerInterface $EntityManager</b>)
    {
        $filmRepository = $entityManager->getRepository(Film::class);
        // ...
    }
    </code></pre>

    <p>Une fois notre <b>FilmRepository</b> injecté, il ne reste plus qu'à l'utiliser.<br>Les classes de type <b>repository</b> permettent d'écrire nos propres requêtes en <b><abbr title="Doctrine Query Language">DQL</abbr></b>, mais propose également des méthodes toutes prêtes, dont <b>findAll()</b> qui permet de récuperer tous les films :</p>

    <pre><code>
     /**
     * @Route("/db", name="db")
     */
    public function db(FilmRepository $filmRepository)
    {
        $films = $filmRepository->findBy([], ['titre' => 'ASC',]); <b>// Liste de tous les films triés par ordre alphabétique</b>

        return $this->render('main/db.html.twig', [
            // ...
            'films' => $films, <b>// On envoie la liste des films dans notre template</b>
        ]);
    }
    </code></pre>

    <p>On dispose désormais de la liste de tous les films, mais on voudrait aussi récuperer le nom des réalisateur et des acteurs qui sont rattachés à chaque titre.<br>Va-t-on être obligé de de faire l'équivalent d'une jointure afin d'avoir l'ensemble des données ?<br>Éh bien, la réponse est non car <b>Symfony</b> à déjà fait tout le travail en amont !</p>

    <p><b>Symfony</b> sait que l'entité <b>Film</b> est liée aux entités <b>Realisateur</b> et <b>Acteur</b> par le biais de ses 2 propriétés <b>realisateur</b> et <b>acteurs</b>.<br>Plus précisément, la propriété <b>realisateur</b> représente une instance de <b>Realisateur</b>, et la propriété <b>acteurs</b> est un tableau composé d'instances de l'objet <b>Acteur</b>.</p>
    <p>C'est cette logique qui permet la récupération automatique du nom du réalisateur et des acteurs pour chaque film.<br>Pour s'en rendre compte, il suffit d'appliquer la ligne de code <code>dd($films);</code> (raccourci pour <code>dump($films); die;</code>) juste après la ligne <code>$films = $filmRepository->findAll();</code></p>

    <pre><code>
     /**
     * @Route("/db", name="db")
     */
    public function db(FilmRepository $filmRepository)
    {
        $films = $filmRepository->findAll(); <b>// On récupère la liste de tous les films grâce à la méthode findAll()</b>
        dd($films);

        // ...
    }
    </code></pre>

    <p>Ce qui donne la chose suivante lorsqu'on recharge la page concernée :</p>

    <pre><code>
    MainController.php on line 61:
    array:5 [▼
        0 => App\Entity\Film &#123;#490 ▼
            -id: 1
            -titre: "Expendables 2"
            -realisateur: Proxies\__CG__\App\Entity\Realisateur &#123;#503 ▶&#125;
            -acteurs: Doctrine\ORM\PersistentCollection &#123;#590 ▶&#125;
        &#125;
        1 => App\Entity\Film &#123;#545 ▶&#125;
        2 => App\Entity\Film &#123;#512 ▶&#125;
        3 => App\Entity\Film &#123;#588 ▶&#125;
        4 => App\Entity\Film &#123;#598 ▶&#125;
    ]
    </code></pre>

    <p>On constate que l'on est en présence d'un tableau d'objets, et lorsqu'on déploie l'arborescence du premier, on peut voir qu'on a bien accès aux propriétés <b>titre</b>, <b>realisateur</b> et <b>acteurs</b> dont il ne reste plus qu'à afficher les valeurs avec <b>TWIG</b> :</p>

    <pre><code>
    &lt;table class=&quot;table table-striped&quot;&gt;
        &lt;thead&gt;
        &lt;tr&gt;
            &lt;th scope=&quot;col&quot;&gt;Titre&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;R&eacute;alisateur&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;Acteurs&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &#123;% for film in films %&#125;
            &lt;tr&gt;
                &lt;td&gt;&#123;&#123; film.titre &#125;&#125;&lt;/td&gt;
                &lt;td&gt;&#123;&#123; film.realisateur.nom }}&lt;/td&gt;
                &lt;td&gt;
                &#123;% for acteur in film.acteurs %&#125;
                    &#123;&#123; acteur.nom &#125;&#125;&#123;% if not loop.last %}, &#123;% endif %&#125;
                &#123;% endfor %&#125;
                &lt;/td&gt;
            &lt;/tr&gt;
        &#123;% endfor %&#125;
        &lt;/tbody&gt;
    &lt;/table&gt;
    </code></pre>

    <p>On utilise une boucle <code>&#123;% for film in films %&#125;</code> afin d'itérer le tableau <b>films</b>.<br>L'accès au nom  du réalisateur s'opère via <code>&#123;&#123; film.realisateur.nom &#125;&#125;</code>.<br>La propriété <b>acteurs</b> étant un tableau, il faut l'itérer <code>&#123;% for acteur in film.acteurs %&#125;</code>, puis accéder au <b>nom</b> pour chaque acteur via <code>&#123;&#123; acteur.nom &#125;&#125;</code>.</p>

    <p id="result">Voici le résultat final :</p>

    <table class="table table-striped">
        <thead>
        <tr>
            <th scope="col">Titre</th>
            <th scope="col">Réalisateur</th>
            <th scope="col">Acteurs</th>
        </tr>
        </thead>
        <tbody>
        {% for film in films %}
            <tr>
                <td>{{ film.titre }}</td>
                <td>{{ film.realisateur.nom }}</td>
                <td>
                   {% for acteur in film.acteurs %}
                       {{ acteur.nom }}{% if not loop.last %}, {% endif %}
                   {% endfor %}
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    {# TODO : implémenter un 'Secret Vault' / https://symfonycasts.com/screencast/symfony-fundamentals/secrets-vault#play #}
{% endblock %}
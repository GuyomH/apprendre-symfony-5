{% extends 'base.html.twig' %}

{% block title %}Symfony 5 et les formulaires : Ajouter des données{% endblock %}

{% block main %}
    <h1>Ajouter des données via un formulaire</h1>

    <p>L'objectif de cette partie est de créer un formulaire d'ajout de films.</p>

    <p>Comme nous l'avons vu précédemment, chaque <b>film</b> est lié à un <b>réalisateur</b>, une <b>liste d'acteurs</b>, et une <b>liste de hashtags</b>. Nous allons donc créer un formulaire qui prend en charge ces 4 éléments.</p>

    <p>Dans le cadre de notre démonstration, l'ajout du <b>réalisateur</b> fera l'objet d'un <b>menu déroulant</b> avec une liste fixe, le <b>casting du film</b> sera représenté par des <b>cases à cocher multiples</b>, l'ajout de <b>hashtag</b> se fera via des <b>champs textuels libres</b>.</p>

    <h2>Créer les formulaires et les imbriquer</h2>

    <p>La logique de conception de notre formulaire demande normalement d'en créer quatre : <b>FilmType</b> le principal, et les trois autres : <b>RealisateurType</b>, <b>ActeurType</b> et <b>HashtagType</b> qu'on imbrique dans <b>FilmType</b>.</p>

    <p>Comme l'ajout du <b>réalisateur</b> et des <b>acteurs</b> passe par un <b><a href="https://symfony.com/doc/current/reference/forms/types/entity.html" target="_blank">EntityType Field</a></b>, cela nous permet de gérer ces champs en direct dans <b>FilmType</b>.</p>

    <p>L'ajout de <b>hashtags</b> passe par un champ textuel dont on ne connait pas à l'avance le nombre d'occurences (1 hashtag par champ, chaque film peut avoir entre 0 et une infinité de hashtags).<br>Il faut donc créer un formulaire spécifique nommé <b>HashtagType</b> que l'on imbriquera dans <b>FilmType</b>.</p>

    <p>On génère donc les formulaires pour les entités <b>Film</b> et <b>Hashtag</b> grâce à la commande <kbd>symfony console make:form</kbd> :</p>

    <pre><code>
    The name of the form class (e.g. DeliciousKangarooType):
     > Film

     The name of Entity or fully qualified model class name that the new form will be bound to (empty for none):
     > Film

     created: src/Form/FilmType.php
    </code></pre>

    <pre><code>
    The name of the form class (e.g. DeliciousKangarooType):
     > Hashtag

     The name of Entity or fully qualified model class name that the new form will be bound to (empty for none):
     > Hashgtag

     created: src/Form/HashtagType.php
    </code></pre>

    <p>Le fait d'avoir créé nos 2 formulaires en les liant à leur entité respective a deux avantages :</p>
    <ul>
        <li>Cela permet de pré-lister les champs à paramétrer dans la classe du formulaire, bien que dans certains cas il faille en supprimer ou en créer.</li>
        <li>Les données en provenance de ces formulaires seront traitées comme une instance de leur classe liée.</li>
    </ul>

    <pre><code>
    <b>src/Form/HashtagType</b>

    use App\Entity\Hashtag;
    use Symfony\Component\Form\Extension\Core\Type\TextType;
    // ...

    class HashtagType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options)
        {
            $builder
                ->add('terme', TextType::class, [
                'label' => false,
                'required' => true,
            ])

                //->add('films') <b>// champ inutile à supprimer</b>
            ;
        }

        public function configureOptions(OptionsResolver $resolver)
        {
            $resolver->setDefaults([
                'data_class' => Hashtag::class, <b>// Lien entre le formulaire et la classe</b>
            ]);
        }
    }
    </code></pre>

    <pre><code>
    <b>src/Form/FilmType</b>

    use App\Entity\Acteur;
    use App\Entity\Film;
    use App\Entity\Realisateur;
    use Doctrine\ORM\EntityRepository;
    use Symfony\Bridge\Doctrine\Form\Type\EntityType;
    use Symfony\Component\Form\Extension\Core\Type\CollectionType;
    use Symfony\Component\Form\Extension\Core\Type\SubmitType;
    use Symfony\Component\Form\Extension\Core\Type\TextType;
    // ...

    class FilmType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options)
        {
            $builder
                ->add('titre', TextType::class, [
                    'label' => 'Titre du film'
                ])

                <b>// Le fait de passer par la classe EntityType nous dispense de d'utiliser un formulaire imbriqué</b>
                ->add('realisateur', EntityType::class, [
                    'class' => Realisateur::class,
                     <b>// Tri par ordre alphabétique de la liste des réalisateurs</b>
                    'query_builder' => function (EntityRepository $entityRepository) {
                        return $entityRepository->createQueryBuilder('r')
                            ->orderBy('r.nom', 'ASC');
                    },
                    'choice_label' => 'nom',
                    'placeholder' => 'Choisir un réalisateur',
                    'label' => 'Nom du réalisateur',
                    'required' => true,
                ])

                <b>// Le fait de passer par la classe EntityType nous dispense de d'utiliser un formulaire imbriqué</b>
                ->add('acteurs', EntityType::class, [
                    'class' => Acteur::class,
                    <b>// Tri par ordre alphabétique de la liste des acteurs</b>
                    'query_builder' => function (EntityRepository $entityRepository) {
                        return $entityRepository->createQueryBuilder('a')
                            ->orderBy('a.nom', 'ASC');
                    },
                    'choice_label' => 'nom',
                    'label' => 'Nom des acteurs',
                    'multiple' => true,
                    'expanded' => true,
                    'placeholder' => 'Choisir au moins un acteur',
                 ])

                <b>// Imbrication de HashtagType</b>
                <b>// Un film peut compter plusieurs acteurs, on utilise donc le type collectionType
                //qui permet l'ajout multiple de champs en provenance de HashtagType</b>
                ->add('hashtags', CollectionType::class, [
                    'entry_type' => HashtagType::class,
                    'allow_add' => true,
                    'allow_delete' => true,
                    'by_reference' => false, <b>// <a href="https://symfony.com/doc/current/reference/forms/types/collection.html#by-reference" target="_blank">Permet l'appel de la méthode addHashtag pour ajouter des hashtag à la liste</a></b>
                    'label' => 'Liste des hashtags',
                 ])

                <b>// Bouton de soumission du formulaire</b>
                ->add('ajouter', SubmitType::class, [
                    'label' => 'Ajouter ce film',
                ])
            ;
        }

        public function configureOptions(OptionsResolver $resolver)
        {
            $resolver->setDefaults([
                'data_class' => Film::class, <b>// Lien entre le formulaire et la classe</b>
            ]);
        }
    }
    </code></pre>

    <p>Pour afficher le formulaire, il faut saisir le code suivant dans le <b>contrôleur</b> et le <b>template twig</b> correspondant :</p>

    <pre><code>
    <b>src/Controller/MainController</b>

    /**
     * @Route("/form/create", name="form2")
     */
    public function form2()
    {
        $form = $this->createForm(FilmType::class); // Création du formulaire

        return $this->render('main/form2.html.twig', [
            'page_list' => $this->pageList,
            'path_list' => $this->pathList,
            'form2' => $form->createView(), // Envoi du formulaire à la vue
        ]);
    }
    </code></pre>

    <pre><code>
    <b>templates/main/form2.html.twig</b>

    &#123;&#123; form_start(form2) &#125;&#125;
        <b>&#123;# Titre du film #&#125;</b>
        &lt;div class="form-group"&gt;
            &#123;&#123; form_row(form2.titre) &#125;&#125;
        &lt;/div&gt;
        <b>&#123;# Nom du réalisateur #&#125;</b>
        &lt;div class="form-group"&gt;
            &#123;&#123; form_row(form2.realisateur) &#125;&#125;
        &lt;/div&gt;
        <b>&#123;# Liste des acteurs #&#125;</b>
        &lt;div class="form-group"&gt;
            &#123;&#123; form_row(form2.acteurs) &#125;&#125;
        &lt;/div&gt;
        <b>&#123;# Liste des hashtags #&#125;</b>
            &#123;&#123; form_row(form2.hashtags) &#125;&#125;
        <b>&#123;# Submit #&#125;</b>
        &lt;div class="form-group"&gt;
            &#123;&#123; form_row(form2.soumettre) &#125;&#125;
        &lt;/div&gt;
    &#123;&#123; form_end(form2) &#125;&#125;
    </code></pre>

    <h2>Gérer le data-prototype</h2>

    <p>Si on affiche notre formulaire à ce stade, il ressemble à cela :</p>

    <div class="text-center my-5">
        <img src="{{ asset('images/add_form_1.png') }}" alt="Aspect primitif du formulaire d'ajout de données" class="img-fluid">
    </div>

    <p>On constate que si les champs dédiés au <b>titre du film</b> et au <b>choix du réalisateur et des acteurs</b> ont déjà leur aspect definitif, le champ <b>hashtag</b> est pour l'instant invisible.</p>

    <p>Comme dit précédemment, il est possible de lier plusieurs hashtags par film, mais on ne peut jamais savoir combien exactement à l'avance.<br>Cela signifie qu'<b>il faut gérer ce champ dynamiquement avec du javascript</b> pour pouvoir rajouter autant de hashtags que nécessaire.</p>

    <p>Si on tape <kbd>F12</kbd> sur la fenêtre du navigateur et que dans l'<b>inspecteur d'éléments</b> on cherche au niveau du titre de champ <b>Liste des hashtags</b>, on va trouver le code suivant :</p>

    <div class="text-center my-5">
        <img src="{{ asset('images/data_prototype.png') }}" alt="data-prototype du champ Acteurs" class="img-fluid">
    </div>

    <p>L'attribut <b>data-prototype</b> surligné en jaune contient le modèle du code <abbr title="HyperText Markup Language">HTML</abbr> du champ de texte pour ajouter un hashtag.</p>

    <p>Grâce à un script <abbr title="JavaScript">JS</abbr> nous allons récupérer ce bout de code afin de permettre à l'utilisateur de <b>générer le nombre exact de champs "Hashtag"</b> dont il a besoin.</p>

    <p>Pour ce faire, nous allons surcharger le bloc <b>javascripts</b> en bas de notre template avec le code suivant :</p>

    <pre><code>
    <b>templates/main/form2.html.twig</b>

    &#123;% block javascripts %&#125;
    &#123;&#123; parent() &#125;&#125; &#123;# permet la surcharge du block #&#125;
    &#123;# Script de gestin du data-prototype en JQuery #&#125;
    &lt;script&gt;
    $(document).ready(function()
    &#123;
        <b>// Élément DIV qui contient le data-prototype</b>
        const $container = $('#hashtag_acteurs');

        <b>// Conteneur DIV d'accueil des champs input des acteurs</b>
        const $container2 = $('#hashtag-container');

        <b>// Nombre d'input</b>
        let index = $container.find(':input').length;

        <b>// Appel de la fonction d'ajout</b>
        $('.addHastag').click(function(e)
        &#123;
            e.preventDefault();
            addHashtag($container);
        &#125;);

        <b>// Fonction d'ajout avec exploitation du data-prototype</b>
        function addActeur($container)
        &#123;
            const template = $container.attr('data-prototype')
                .replace(/__name__label__/g, 'Hashtag')
                .replace(/__name__/g, index)
            ;

            const $prototype = $(template);

            deleteButton($prototype);

            $container2.append($prototype);

            index++;
        &#125;

        <b>// Fonction de suppression des champs hashtag</b>
        function deleteButton($prototype)
        &#123;
            const $deleteLink = $('&lt;a href="#" class="btn btn-danger btn-sm"&gt;Annuler&lt;/a&gt;');

            $prototype.append($deleteLink);

            $deleteLink.click(function(e)
            &#123;
                $prototype.remove();

                <b>// Évite qu'un # apparaisse dans l'URL</b>
                e.preventDefault();
                return false;
            &#125;);
        &#125;

        <b>// Gestion du label post message d'erreur / mode édition</b>
        $('#hashtag-area legend.col-form-label').each(
            function(index)
            &#123;
                if(index &gt; 0)
                &#123;
                    $(this).html('Hashtag');
                &#125;
            &#125;
        );

        <b>// Gestion du bouton Supprimer post message d'erreur / mode édition</b>
        $('#hashtag-area fieldset.form-group').each(
            function(index)
            &#123;
                const $deleteLink = $('&lt;a href="#" class="btn btn-danger btn-sm"&gt;Annuler&lt;/a&gt;');

                if (index &gt; 0)
                &#123;
                    $(this).append($deleteLink);
                &#125;

                $deleteLink.click(function (e)
                &#123;
                    $(this).parent().remove();

                    <b>// Évite qu'un # apparaisse dans l'URL</b>
                    e.preventDefault();
                    return false;
                &#125;);
            &#125;);


        <b>// Script pour gérer rendre la sélection d'au moins 1 acteur obligatoire</b>
        $("#film_soumettre").click(function ()
        &#123;
            checked = $("input[type=checkbox]:checked").length;

            if (!checked) &#123;
                alert("Veuillez sélectionner au moins un acteur.");
                return false;
            &#125;
        &#125;);
    &#125;);
    &lt;/script&gt;
    &#123;% endblock %&#125;
    </code></pre>

    <p>Une analyse du code montre que celui-ci permet d'ajouter et de supprimer des champs  <b>"Hashtag"</b>, et que pour pouvoir les afficher, il faut rajouter le bouton d'ajout et un conteneur &lt;div&gt; avec l'id <b>hashtag-container</b>  à notre template de tout à l'heure.</p>

    <p>Afin de pouvoir améliorer notre formulaire ultérieurement, nous allons également entourer l'ensemble d'un autre conteneur &lt;div&gt; avec l'id <b>hashtag-area</b> :</p>

    <pre><code>
    <b>templates/main/form2.html.twig</b>

    &#123;&#123; form_start(form2) &#125;&#125;

        &#123;# ... #&#125;

        &#123;# Liste des hashtags #&#125;
        <b>&lt;div id="hashtag-area"&gt;</b>
            &#123;&#123; form_row(form2.terme) &#125;&#125;
            <b>&lt;div id="hashtag-container"&gt;&lt;/div&gt;
            &lt;input type="button" class="btn btn-info btn-sm mb-5 addHashtag" value="Ajouter un hashtag"&gt;</b>
        <b>&lt;/div&gt;</b>
        &#123;# ... #&#125;

    &#123;&#123; form_end(form2) &#125;&#125;
    </code></pre>

    <p>Une fois tous ces ajouts effectués, le formulaire s'affiche sous sa forme finale :</p>

    <div class="text-center my-5">
        <img src="{{ asset('images/add_form_2.png') }}" alt="Aspect définitif du formulaire d'ajout de données" class="img-fluid">
    </div>

    <h2>Brancher le formulaire</h2>

    <p>Il reste à <b>brancher le formulaire</b> afin que ses données puissent être traitées et enregistrées dans la <b>base de données</b>.</p>

    <p>Si dans la section précédente, on utilisait les objets <b>Request</b> et <b>FilmRepository</b> pour interroger la base de données, cette fois-ci, nous allons nous servir du couple <b>Request</b> et <b>EntityManager</b> afin d'y insérer des données :</p>

    <pre><code>
    <b>src/Controller/MainController</b>

    /**
     * @Route("/form/create", name="form2")
     */
    public function form2(Request $request, EntityManagerInterface $entityManager)
    {
        $form = $this->createForm(FilmType::class); <b>// Création du formulaire</b>
        $form->handleRequest($request); <b>// Gestion de la requête</b>

        <b>// Si le formulaire a été soumis et est valide</b>
        if($form->isSubmitted() && $form->isValid())
        {
            $film = $form->getData(); <b>// Données du film en en provenance du formulaire</b>

            $entityManager->persist($film); <b>// On rend l'objet contenant les données persistant</b>
            $entityManager->flush(); <b>// On flush afin de finaliser l'enregistrement dans la BDD</b>
        }

        <b>// TODO: Flash message + redirection</b>

        return $this->render('main/form2.html.twig', [
            // ...
            'form2' => $form->createView(), <b>// Envoi du formulaire à la vue</b>
        ]);
    }
    </code></pre>

    <p>À partir de là il reste une dernière opération pour rendre notre formulaire fonctionnel, faire <b><a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.7/reference/working-with-associations.html#transitive-persistence-cascade-operations" target="_blank">persister en cascade</a></b> les données liées à l'entité <b>Hashtag</b> afin de permettre l'enregistrement des <b>termes</b> dans la base de données.</p>

    <p>Cette opération s'effectue avec une <b>annotation</b> dans l'entité principale <b>Film</b> au niveau de la propriété <b>hashtags</b> qui permet de créer l'association avec l'entité secondaire <b>Hashtag</b> :</p>

    <pre><code>
    <b>src/Entity/Film</b>

    // ...

    /**
     * @ORM\OneToMany(targetEntity=Hashtag::class, mappedBy="film", <b>cascade={"persist", "remove"}</b>)
     */
    private $hashtags;

    // ...
    </code></pre>

    <p>Notre formulaire est désormais totalement fonctionnel, mais il reste 2 détails à améliorer.</p>

    <h2>Sécuriser le formulaire</h2>

    <p>Pour l'instant, la seule sécurisation dont dispose notre formulaire se résume à l'utilisation de l'attribut <b>required</b> qui n'a aucun effet coté serveur.</p>

    <p>Afin de sécuriser les champs de notre formulaire coté serveur, <b>Symfony</b> propose le système des <b><a href="https://symfony.com/doc/current/reference/constraints.html" target="_blank">contraintes de validation</a></b>.</p>

    <p>Les contraintes de validation permettent de filtrer la valeur des propriétés des entités.</p>

    <p>Voici comment les mettre en place dans <b>Film</b>, <b>Realisateur</b>, <b>Acteur</b> et <b>Hashtag</b> :</p>

    <pre><code>
    <b>src/Entity/Film</b>

    // ...

    use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
    use Symfony\Component\Validator\Constraints as Assert;
    use Symfony\Component\Validator\Constraints\Count;

    /**
     * @ORM\Entity(repositoryClass=FilmRepository::class)
     <b>* // <a href="https://symfony.com/doc/current/reference/constraints/UniqueEntity.html" target="_blank">Empêche d'enregister 2 fois le même film pour le même réalisateur</a>
     * @UniqueEntity(
     * fields={"titre", "realisateur"},
     * errorPath = "titre",
     * message="Ce titre de film est déjà enregistré pour ce réalisateur !"
     * )</b>
     */
    class Film
    {

        // ...

        /**
         * @ORM\Column(type="string", length=255)
         <b>* // Force la saisie d'une valeur entre 4 et 100 caractères
         * @Assert\NotBlank(message="Le titre du film doit être renseigné !")
         * @Assert\Length(
         *      min = 4,
         *      max = 100,
         *      minMessage = "Le titre doit faire au minimum &#123;&#123; limit &#125;&#125; caractères !",
         *      maxMessage = "Le titre doit faire au maximum &#123;&#123; limit &#125;&#125; caractères !"
         * )</b>
         */
        private $titre;

        /**
         * @ORM\ManyToOne(targetEntity=Realisateur::class, inversedBy="films")
         <b>* // Force le choix d'une valeur
         * @Assert\NotNull(message="Un nom de réalisateur doit être choisi")</b>
         */
        private $realisateur;

        /**
         * @ORM\ManyToMany(targetEntity=Acteur::class, inversedBy="films")
         * @ORM\OrderBy({"nom" = "ASC"}) <b>// Permet de trier le nom des acteurs par ordre alphabétique lors du chargement des données</b>
         <b>* // Force à cocher au moins le nom d'un acteur
         * @Count(
         *     min = 1,
         *     minMessage = "Au moins un acteur doit être selectionné"
         * )</b>
         */
        private $acteurs;

         /**
         * @ORM\OneToMany(targetEntity=Hashtag::class, mappedBy="film", cascade={"persist", "remove"})
         * @ORM\OrderBy({"terme" = "ASC"})
         <b>// <a href="https://symfony.com/doc/current/reference/constraints/Valid.html" target="_blank">Permet de gérer la validation  d'un objet imbriqué</a> (voir propriété "terme" de l'entité "Hashtag")
         * @Assert\Valid()</b>
         */
         private $hashtags;

        // ...
    }
    </code></pre>

    <pre><code>
    <b>src/Entity/Hashtag</b>

    // ...

    use Symfony\Component\Validator\Constraints as Assert; <b>Importation de la classe de gestion de la contrainte</b>

    /**
     * @ORM\Entity(repositoryClass=HashtagRepository::class)
     */
    class Hashtag
    {

        // ...

        /**
         * @ORM\Column(type="string", length=255)
         <b>* // Force la saisie d'une valeur entre 4 et 50 caractères
         * @Assert\NotBlank(message="Le nom de l'acteur doit être renseigné !")
         * @Assert\Length(
         *      min = 4,
         *      max = 50,
         *      minMessage = "Le hashtag doit faire au minimum &#123;&#123; limit &#125;&#125; caractères !",
         *      maxMessage = "Le hashtag doit faire au maximum &#123;&#123; limit &#125;&#125; caractères !"
         * )</b>
         */
        private $nom;

        // ...
    }
    </code></pre>

    <p>Pour désactiver la <b>validation coté client</b> afin de tester la <b>validation coté serveur</b>, il suffit de remplacer la ligne <code>&#123;&#123; form_start(form2) &#125;&#125;</code><br>par <code>&#123;&#123; form_start(form2, &#123;'attr': &#123;'novalidate': 'novalidate'&#125;&#125;) &#125;&#125;</code> dans le template <b>form2.html.twig</b></p>

    <p>N'hésitez pas pas à tester toutes les erreurs possibles, champs vides, nombre de caractères insuffisants, etc.</p>

    <h2>Notifier l'utilisateur du succès de la soumission du formulaire</h2>

    <p>Lorsque les données de notre formulaire on bien été validées, il est de bon ton de notifier l'utilisateur et de le rediriger vers une nouvelle page.</p>

    <p>Pour notre exemple, nous allons rediriger notre utilisateur (vous) sur la page courante avec une jolie notification :</p>

    <pre><code>
    <b>src/Controller/MainController</b>

    /**
     * @Route("/form/create", name="form2")
     */
    public function form2(Request $request, EntityManagerInterface $entityManager)
    {
       // ...

        if($form->isSubmitted() && $form->isValid())
        {
            // ...

            <b> // Notification en cas de succès de la soumission + redirection vers la page courante
            $this->addFlash(
                'notice',
                'Votre film a bien été ajouté ! Il ne vous reste plus qu\'à trouver une page où vous pourrez vérifier le résultat ;-)'
            );

                return $this->redirectToRoute('form2');</b>
        }
    }
    </code></pre>

    <pre><code>
    <b>templates/base.html</b>

    &lt;header&gt;
        &#123;% block header %&#125;
           &#123;# ... #&#125;
        &#123;% endblock %&#125;

        <b>&#123;# Affichage des messages de notification #&#125;
        &#123;% block flash_message %&#125;
            &#123;% for message in app.flashes('notice') %&#125;
                &lt;div class="flash-notice alert alert-primary" role="alert"&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;
            &#123;% endfor %&#125;
        &#123;% endblock %&#125;</b>
    &lt;/header&gt;
    </code></pre>

    <p><a href="https://symfonycasts.com/screencast/symfony-forms/flash-messages" target="_blank"><i class="fa fa-link"></i>Tuto Flash Messages en anglais</a></p>

    <p><a href="https://symfony.com/doc/current/controller.html#redirecting" target="_blank"><i class="fa fa-link"></i>Documentation sur la redirection en anglais</a></p>

    <h2 id="add-form">Formulaire d'ajout de films</h2>

    <p>Voici le formulaire final, prêt à être testé par vos soins :</p>

    {# Affichage du formulaire #}
    {{ form_start(form2) }}
        {# Titre du film #}
        <div class="form-group">
            {{ form_row(form2.titre) }}
        </div>
        {# Nom du réalisateur #}
        <div class="form-group">
            {{ form_row(form2.realisateur) }}
        </div>
        {# Liste des acteurs #}
        <div class="form-group">
            {{ form_row(form2.acteurs) }}
        </div>
        {# Liste des hashtags #}
        <div id="hashtag-area">
            {{ form_row(form2.hashtags) }}
            <div id="hashtag-container"></div>
            <input type="button" class="btn btn-info btn-sm mb-5 addHashtag" value="Ajouter un hashtag">
        </div>
        {# Submit #}
        <div class="form-group">
            {{ form_row(form2.soumettre) }}
        </div>
    {{ form_end(form2) }}
{% endblock %}

{% block javascripts %}
    {{ parent() }} {# permet la surcharge du block #}
    {# Script de gestion du data-prototype en JQuery #}
    <script>
    $(document).ready(function()
    {
        // Élément DIV qui contient le data-prototype
        const $container = $('#film_hashtags');

        // Conteneur DIV d'accueil des champs input des acteurs
        const $container2 = $('#hashtag-container');

        // Nombre d'input
        let index = $container.find(':input').length;

        // Appel de la fonction d'ajout
        $('.addHashtag').click(function(e)
        {
            e.preventDefault();
            addHashtag($container);
        });

        // Fonction d'ajout avec exploitation du data-prototype
        function addHashtag($container)
        {
            const template = $container.attr('data-prototype')
                .replace(/__name__label__/g, 'Hashtag')
                .replace(/__name__/g, index)
            ;

            const $prototype = $(template);

            deleteButton($prototype);

            $container2.append($prototype);

            index++;
        }

        // Fonction de suppression des champs hashtag
        function deleteButton($prototype)
        {
            const $deleteLink = $('<a href="#" class="btn btn-danger btn-sm">Annuler</a>');

            $prototype.append($deleteLink);

            $deleteLink.click(function(e)
            {
                $prototype.remove();

                // Évite qu'un # apparaisse dans l'URL
                e.preventDefault();
                return false;
            });
        }

        // Gestion du label post message d'erreur / mode édition
        $('#hashtag-area legend.col-form-label').each(
            function(index)
            {
                if(index > 0)
                {
                    $(this).html('Hashtag');
                }
            }
        );

        // Gestion du bouton Supprimer post message d'erreur / mode édition
        $('#hashtag-area fieldset.form-group').each(
            function(index) {
                const $deleteLink = $('<a href="#" class="btn btn-danger btn-sm">Annuler</a>');

                if (index > 0) {
                    $(this).append($deleteLink);
                }

                $deleteLink.click(function (e) {
                    $(this).parent().remove();

                    // Évite qu'un # apparaisse dans l'URL
                    e.preventDefault();
                    return false;
                });
            });


        // Script pour gérer rendre la sélection d'au moins 1 acteur obligatoire
        $("#film_soumettre").click(function () {
            checked = $("input[type=checkbox]:checked").length;

            if (!checked) {
                alert("Veuillez sélectionner au moins un acteur.");
                return false;
            }
        });
    });
    </script>
{% endblock %}
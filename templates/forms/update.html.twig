{% extends 'base.html.twig' %}

{% block title %}Symfony 5 et les formulaires : Mettre à jour des données{% endblock %}

{% block main %}
    <h1>Mettre à jour des données via un formulaire</h1>

    <p>Quelle est la <b>différence</b> entre un <b>formulaire d'ajout</b> et un <b>formulaire de mise à jour</b> ?</p>

    <p>La réponse est <b>aucune</b>, car dans les deux cas on utilise le <b>même formulaire</b>.<p>

    <p>Dans le cas d'une création de données, le formulaire est vide, et le remplir puis le soumettre va déclencher un <b>INSERT</b>.</p>

    <p>Dans le cas d'une édition de données, le formulaire est pré-rempli, et modifier les champs puis le soumettre va déclencher un <b>UPDATE</b>.</p>

    <h2>Créer un listing des films avec un bouton d'édition</h2>

    <p>Contrairement à l'approche des sections précédentes, le formulaire d'édition des films va se trouver sur une page dédiée.<br>La première tâche va consister à créer le listing des films avec pour chacun un lien menant vers le formulaire d'édition.</p>

    <p>Pour créer notre listing, on commence par récupérer tous les films par ordre alphabétique, puis à envoyer le tout dans la vue :</p>

    <pre><code>
    <b>src/Controller/Formcontroller</b>

    /**
     * @Route("/form/update", name="update")
     */
    public function form3(Request $request, FilmRepository $filmRepository)
    {
        <b>// Récupération de la liste de tous les films</b>
        $films = $filmRepository->findby([], ['titre' => 'ASC']);

        return $this->render('forms.update.html.twig', [
            // ...
            'films' => $films,
        ]);
    }
    </code></pre>

    <p>Le formulaire d'ajout et celui de mise à jour étant le même, nous allons utiliser la même méthode que pour l'ajout de données, en faisant cohabiter 2 annotations :</p>

    <pre><code>
    <b>src/Controller/FormController</b>

    class FormController extends AbstractController
    &#123;
        /**
         * @Route("/form/create", name="create")
         <b>* @Route("/edit/&#123;id&#125;", name="edit")</b>
         */
        public function edit()
        &#123;
            return $this-&gt;render('forms/edit.html.twig');
        &#125;
    &#125;
    </code></pre>

    <p>On note que la route de notre page s'appelle <b>edit</b> et prend en paramètre un <b>id</b> qui sera celui du film demandé.</p>

    <p>Dans le sous dossier <b>forms</b> du dossier <b>templates</b>, on crée le fichier <b>edit.html.twig</b>.</p>

    <p>Une fois ceci fait, on peut créer notre listing :</p>

    <pre><code>
   <b>templates/forms/update.html.twig</b>

    &lt;table class="table table-striped"&gt;
        &lt;tbody&gt;
        &#123;% for film in films %&#125;
            &lt;tr&gt;
                &lt;td&gt;&#123;&#123; film.titre &#125;&#125;&lt;/td&gt;
                &lt;td&gt;&lt;a href="&#123;&#123; path('edit', &#123; 'id': film.id &#125;) &#125;&#125;" class="btn btn-primary btn-sm"&gt;Éditer&lt;/a&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &#123;% endfor %&#125;
        &lt;/tbody&gt;
    &lt;/table&gt;
    </code></pre>

    <p>Pour chaque film, la boucle twig affiche le titre du film <b>film.titre</b> et affiche un lien vers la page de notre formulaire d'édition qui prend en paramètre l'<b>id</b> du film <b>&#123;&#123; path('edit', &#123; 'id': film.id &#125;) &#125;&#125;</b>.</p>

    <p>Cela nous donne le tableau ayant l'aspect suivant :</p>

    <div class="text-center my-5">
        <img src="{{ asset('images/edit_form_1.png') }}" alt="Liste des films à éditer" class="img-fluid">
    </div>

    <h2>Gérer le contrôleur</h2>

    <p>Maintenant que notre listing est prêt, et que chaque lien mène vers le formulaire d'édition en précisant l'<b>id</b> du film en paramètre, il ne reste plus en théorie qu'à <b>ré-utiliser notre formulaire sur la page de destination</b>.</p>

    <p>On commence par adapter le code du <b>FormController</b> pour qu'il gère l'ajout et la mise à jour des données :</p>

    <pre><code>
    <b>src/Controller/FormController</b>

    /**
     * @Route("/form/create", name="create")
     <b>* @Route("/edit/&#123;id&#125;", name="edit")</b>
     */
    public function createAndEdit(Film $film = null, Request $request, EntityManagerInterface $entityManager)
    &#123;
        <b>// Si la variable film n'est pas nulle / Si on est en mode édition</b>
        <b>// On crée 3 variables afin d'adapter la notification, la route et, la vue en fonction qu'on soit en mode édition ou création</b>
        if ($film !== null)
        &#123;
            $noticeMessage = 'Votre film a bien été édité !';
            $route = 'update';
            $view = 'forms/edit.html.twig';
        <b>// Sinon, mode ajout de nouvelle de données</b>
        &#125; else &#123;
            $noticeMessage = 'Votre film a bien été ajouté !';
            $route = 'create';
            $view = 'forms/create.html.twig';
        &#125;

        $form = $this-&gt;createForm(FilmType::class, <b>$film</b>); <b>// Création du formulaire avec les données du film courant en mode édition</b>

        $form-&gt;handleRequest($request); <b>// Gestion de la requête</b>

        if($form-&gt;isSubmitted() && $form-&gt;isValid())
        &#123;
            $film = $form-&gt;getData();

            $entityManager-&gt;persist($film);
            $entityManager-&gt;flush();

            $this-&gt;addFlash('notice', $noticeMessage);

            return $this-&gt;redirectToRoute($route);
        &#125;

        return $this-&gt;render($view, [
            // ...
            'form' =&gt; $form-&gt;createView(), <b>// Envoi du formulaire à la vue</b>
        ]);
    </code></pre>

    <p>Si on compare ce code à celui de la page <b><a href="{{ path('create') }}" target="_blank">Ajouter des données</a></b> on remarque tout d'abord l'injection de l'objet <b>Film</b> en premier paramètre de la méthode <code>edit()</code>.</p>

    <p>Le fait d'injecter l'objet <b>Film</b> permet de le <b>"mapper"</b> automatiquement avec l'<b>ID</b> du film contenu dans l'<b><abbr title="Uniform Resource Locator">URL</abbr></b>.</p>

    <p>Dit autrement, nous allons par le biais de cette technique que l'on nomme <b><a href="https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html" target="_blank">ParamConverter</a></b>, créer une instance de <b>Film</b> peuplée avec les données du film courant.</p>

    <p>Bien évidemment cette technique fonction uniquement si le nom du paramètre défini dans la route correspond à une propriété de l'objet.<br>Dans notre cas nous avons utilisé le paramètre <b>id</b> ( <code>@Route("/edit/{id}", name="edit")</code> ), ce qui est le plus courant, mais on pourrait très bien imaginer utiliser une autre propriété de l'objet comme le titre du film.</p>

    <p>Une fois cette opération faite, il ne reste plus qu'à passer notre objet en second paramètre de la méthode <code>createForm()</code> via la variable <code>$film</code>.</p>

    <p>Dernier point, il n'est plus nécessaire de persister les données car l'objet <b>Film</b> à déjà été injecté, il suffit de de faire un <code>flush()</code> pour mettre à jour les données.</p>

    <h2>Gérer la vue</h2>

    <p>Le <b>formulaire de mise à jour</b> est strictement le même que celui de <b>création de données</b> car il est construit à partir de <b>FilmType</b>, nous allons donc isoler le code twig de ce formulaire dans le fichier <b>templates/forms/common/create-update-form.html.twig</b> :</p>

    <pre><code>
    <b>templates/forms/common/create-update-form.html.twig</b>

    &#123;&#123; form_start(form) &#125;&#125;
    <b>&#123;# Titre du film #&#125;</b>
    &lt;div class="form-group"&gt;
        &#123;&#123; form_row(form.titre) &#125;&#125;
    &lt;/div&gt;
    &#123;# Nom du réalisateur #&#125;
    <b>&lt;div class="form-group"&gt;</b>
        &#123;&#123; form_row(form.realisateur) &#125;&#125;
    &lt;/div&gt;
    <b>&#123;# Liste des acteurs #&#125;</b>
    &lt;div class="form-group"&gt;
        &#123;&#123; form_row(form.acteurs) &#125;&#125;
    &lt;/div&gt;
    <b>&#123;# Liste des hashtags #&#125;</b>
    &lt;div id="hashtag-area"&gt;
        &#123;&#123; form_row(form.hashtags) &#125;&#125;
        &lt;div id="hashtag-container"&gt;&lt;/div&gt;
        &lt;input type="button" class="btn btn-info btn-sm mb-5 addHashtag" value="Ajouter un hashtag"&gt;
    &lt;/div&gt;
    <b>&#123;# Submit #&#125;</b>
    <b>&#123;# On adapte la valeur du bouton soumettre si on est en mode édition #&#125;</b>
    &lt;div class="form-group"&gt;
        &#123;% if app.request.get('_route') is same as('edit')%&#125;
            &#123;&#123; form_row(form.soumettre, &#123;'label': 'Éditer ce film'&#125;) &#125;&#125;
        &#123;% else %&#125;
            &#123;&#123; form_row(form.soumettre) &#125;&#125;
        &#123;% endif %&#125;
    &lt;/div&gt;
    &#123;&#123; form_end(form) &#125;&#125;
    </code></pre>

    <p>la seule petite différence va se situer au niveau du <b>bouton de soumission</b> dont la valeur définie dans <b>FilmType</b> est <b>"Ajouter ce film"</b>.</p>

    <p>Afin de lui attribuer la valeur <b>"Éditer ce film"</b> au niveau du code <b>twig</b>, il suffit de créer une boucle conditionnelle qui compare le nom de la <b>route</b> et, de redéfinir le <b>label</b> de la propriété <b>soumettre</b> de la manière suivante :<br><code>&#123;&#123; form_row(form.soumettre, <b>&#123;'label': 'Éditer ce film'&#125;</b>) &#125;&#125;</code></p>

    <p>Il ne reste plus qu'à supprimer le code du formulaire en doublon dans les vues <b>create</b> et <b>edit</b> et le remplacer par le code suivant :</p>

    <pre><code>
    <b>templates/forms/create.html.twig</b>
    <b>templates/forms/edit.html.twig</b>

    &#123;% block main %&#125;
        &#123;% ... %&#125;

        <b>&#123;% include 'forms/common/create-update-form.html.twig' %&#125;</b>
    &#123;% endblock %&#125;
    </code></pre>

    <p>Désormais, si l'on charge le formulaire correspondant au film <b>Retour vers le Futur</b>, on obitient ceci :</p>

    <div class="text-center my-5">
        <img src="{{ asset('images/edit_form_2.png') }}" alt="Formulaire d'édition" class="img-fluid">
    </div>

    <p>Les informations du formulaire sont pré-remplies, et il suffit de les modifier puis de cliquer sur le bouton <b>Éditer ce film</b> pour mettre les données du film à jour.</p>

    <p class="alert alert-warning">Lorsqu'on supprime un <b>hashtag</b> en cliquant sur le bouton annuler, ce n'est pas un mécanisme de type <b>requête Ajax</b> qui est à l'oeuvre, mais une analyse du <b><abbr title="Document Object Model">DOM</abbr></b>.<br>En effet, chaque bouton <b>Annuler</b> ne fait que supprimer le champ <b>Hashtag</b> concerné via une méthode <b>JavaScript</b> de type <code>remove()</code>.<br>C'est lorsqu'on valide le formulaire que le système compare la <b>liste des hashtags</b> avec les valeurs enregistrées dans l'entité <b>Hashtag</b> pour le film courant, et s'il en manque une ou plusieurs, elle sont <b>supprimées de la base de données</b> à ce moment là.</p>

    <h2>Listing des films</h2>

    <p>Vous pouvez maintenant tester le formulaire d'édition sur le film de votre choix grâce au listing ci-dessous.</p>

    <p>N'hésitez pas à modifier le titre du film, changer le nom du réalisateur, ajouter ou enlever des acteurs, etc.</p>

    {# Liste des film avec bouton éditer #}
    <table class="table table-striped">
        <tbody>
        {% for film in films %}
            <tr>
                <td>{{ film.titre }}</td>
                <td><a href="{{ path('edit', { 'id': film.id }) }}" class="btn btn-primary btn-sm">Éditer</a></td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
{% endblock %}



    {#
    <h2>Récupérer l'ID d'un film au hasard</h2>

    <p>Dans le cadre de notre démonstration, et comme <b>Doctrine</b> ne gère pas la fonction <b><abbr title="Search Query Language">SQL</abbr></b> <code>rand()</code>, nous allons créer une méthode écrite en <b><a href="https://symfony.com/doc/current/doctrine.html#querying-with-sql" target="_blank"><abbr title="Search Query Language">SQL</abbr> brut</a></b> dans le <b>FilmRepository</b> afin de récupérer l'<b>ID</b> d'un film au hasard :</p>

    <pre><code>
    <b>src/Repository/FilmRepository</b>

    // ...

    class FilmRepository extends ServiceEntityRepository
    {

        // ...

        <b>public function getIdAtRandom()
        {
            $conn = $this->getEntityManager()->getConnection();

            $sql = '
                    SELECT id FROM film
                    ORDER BY rand()
                    LIMIT 1
            ';

            $stmt = $conn->prepare($sql);
            $stmt->execute();
            return $stmt->fetchOne();
        }</b>

        // ...
    }
    </code></pre>

    <p>Une méthode en  <b><a href="https://symfony.com/doc/current/doctrine.html#querying-with-sql" target="_blank"><abbr title="Search Query Language">SQL</abbr> brut</a></b> utilise le <b>véritable nom des tables et des champs</b> dans la base de données.<br>Le recours à cette méthode doit se faire avec parcimonie et seulement lorsqu'on est bloqué avec le <b><abbr title="Doctrine Query Language">DQL</abbr></b>.</p>

    <h2>Afficher le formulaire</h2>

    <p>L'étape suivante consiste à reprendre le même formulaire que pour la section <b>"Ajouter des données"</b>, puis l'associer avec un objet de la classe <b>Film</b> afin de l'afficher avec les données à mettre à jour :</p>

    <pre><code>
    <b>src/Controller/MainController</b>

    /**
     * @Route("/form/update", name="form3")
     */
    public function form3(EntityManagerInterface $entityManager)
    {
        <b>// Récupération du FilmRepository via l'EntityManagerInterface
        // <i>Il aurait été possible de récupérer le repository en l'injectant directement</i></b>
        $filmRepository = $entityManager->getRepository(Film::class);

        <b>// Récupération d'un ID de film au hasard via la méthode custom écrite en SQL brut</b>
        $id = $filmRepository->getIdAtRandom();

        <b>// Récupération de l'objet film via la méthode find()
        // qui prend en paramètre l'ID aléatoire</b>
        $film = $filmRepository->find($id);

        <b>// Création du formulaire avec l'objet Film <i>($film)</i> en second paramètre afin de remplir le formulaire</b>
        $form = $this->createForm(FilmType::class, $film);

        return $this->render('main/update.html.twig', [
            'page_list' => $this->pageList,
            'path_list' => $this->pathList,
            'form3' => $form->createView(), <b>// Envoi du formulaire à la vue</b>
        ]);
    }
    </code></pre>

    <p>Pour l'affichage du film, on reprend le même code que la section précédente, avec pour seule différence le bouton <b>"Ajouter ce film"</b> que l'on renomme <b>"Mettre à jour ce film"</b> :</p>

    <pre><code>
    &#123;# templates/main/update.html.twig #&#125;

    &#123;&#123;{ form_start(form3) &#125;&#125;

        <b>&#123;# ... #&#125;</b>

        &lt;div class="form-group"&gt;
            <b> &#123;# On surcharge le "label" du bouton de soumission avec la nouvelle valeur #&#125;</b>
            &#123;&#123; form_row(form3.soumettre, <b>{'label': 'Mettre à jour ce film'}</b>) &#125;&#125;
        &lt;/div&gt;
    &#123;&#123; form_end(form3) &#125;&#125;
    </code></pre>

    <p>Le script <b><abbr title="JavaScript">JS</abbr></b> de gestion des champs d'acteurs est strictement identique à celui de la section précédente, on reprend donc le même au point virgule près.</p>

    <h2>Brancher le formulaire</h2>

    <p>Le branchement du formulaire à la base de données se fait de la même manière que dans la section précédente :</p>

    <pre><code>
     <b>src/Controller/MainController</b>

    /**
     * @Route("/form/update", name="form3")
     */
    public function form3(Request $request, EntityManagerInterface $entityManager)
    &#123;
        <b>// Récupération du FilmRepository via l'EntityManagerInterface</b>
        $filmRepository = $entityManager->getRepository(Film::class);

        <b>// Récupération de l'ID d'un film au hasard'</b>
        $id = $filmRepository->getIdAtRandom();

        <b>// Récupération du film via le numéro d'ID choisi au hasard</b>
        $film = $filmRepository->find($id);

        <b>// Création du formulaire</b>
        $form = $this->createForm(FilmType::class, $film);

        <b>// Gestion de la requête</b>
        $form->handleRequest($request);

        <b>// Si le formulaire a été soumis et est valide</b>
        if($form->isSubmitted() && $form->isValid())
        &#123;
            <b>// On flush afin de finaliser la mise à jour dans la BDD</b>
            <b>// </b>
            $entityManager->flush();

            <b>// Notification en cas de succès de la soumission + redirection vers la page courante</b>
            $this->addFlash(
                'notice',
                'Votre film a bien été mis à jour ! Il ne vous reste plus qu\'à trouver une page où vous pourrez voir le résultat ;-)'
            );

            return $this->redirectToRoute('form3');
        &#125;

        return $this->render('main/update.html.twig', [

            // ...

            <b>// Envoi du formulaire à la vue</b>
            'form3' => $form->createView(),
        ]);
    &#125;
    </code></pre>

    <h2>Mettre en place les cascades dans l'entité Film</h2>

    <pre><code>
    <b>src/Entity/Film</b>

    // ...

    /**
     * @ORM\ManyToOne(targetEntity=Realisateur::class, inversedBy="films", <b>cascade={"persist"}</b>)
     * @Assert\NotNull(message="Un nom de réalisateur doit être choisi")
     */
    private $realisateur;

    /**
     * @ORM\ManyToMany(targetEntity=Acteur::class, inversedBy="films", <b>cascade={"persist", "remove"}</b>)
     * @Assert\Valid()
     */
    private $acteurs;

    // ...
    </code></pre>
    #}
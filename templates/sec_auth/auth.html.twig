{% extends 'base.html.twig' %}

{% block title %}Authentification et autorisation avec Symfony 5{% endblock %}

{% block main %}
    <h1>Authentification et autorisation</h1>

    <p>Symfony propose un système de contrôle d'accès aux ressources du site basé sur l'<b>authentification</b> et l'<b>autorisation</b>.</p>

    <p>L'<b>authentification</b> correspond au fait de se <b>connecter</b> (via un login et un mot de passe) sur le site, et donc de ne plus être <b>anonyme</b>.</p>

    <p>L'<b>autorisation</b> quant à elle, correspond au fait de pouvoir accéder ou non à certaines ressources du site en fonction du <b>rôle</b> (user ou admin) attribué à l'utilisateur.</p>

    <p>En règle générale, l'accès à la page d'accueil d'un site web ne nécessite pas de se connecter, et on peut donc y accéder en mode <b>anonyme</b>.<br>A contrario, l'accès à l'<b>interface d'administration du site</b> requiert de s'identifier avec le <b>rôle ADMIN</b>.<br>Entre les deux, nous avons les pages dont l'accès nécessite d'être identifié avec le <b>rôle USER</b> comme par exemple la section <b>mon compte</b> sur un site marchand.</p>

    <p>Le schéma ci-après résume comment un utilisateur simple tente d'accéder à une ressource reservée aux utilisateurs ayant le rôle <b>ADMIN</b> dans <b>Symfony</b> :</p>

    <div class="text-center my-5"><img src="{{ asset('images/auth_diagram.svg') }}" alt="Schéma d'authentification et d'autorisation dans Symfony" class="img-fluid"></div>

    <p>On constate que notre utilisateur <b>"Jean"</b> se logue à l'aide de ses identifiants, et comme ceux-ci sont corrects le <b>"firewall"</b> le laisse passer <b>(1)</b>.<br>Ensuite, la page demandée par <b>Jean</b> nécessite d'avoir le rôle <b>ADMIN</b> pour y accéder, et comme il n'a que le rôle <b>USER</b>, le système de contrôle d'accès le bloque <b>(2)</b>, et il est notifié que l'accès lui est refusé <b>(3)</b>.</p>

    <p class="alert alert-primary"><i class="fa fa-paperclip"></i> Tous les scénarios d'accès à une page en fonction du rôle sont présentés dans la <a href="https://symfony.com/doc/2.4/book/security.html" target="_blank">section sécurité</a> du site Symfony.</p>

    <h2>Mettre en place l'authentification</h2>

    <h3>Création de l'entité User</h3>

    <p>La première étape pour mettre en place notre système d'authentification consiste à créer une classe de gestion des utilisateurs grâce à la commande <kbd>symfony console make:user</kbd> :</p>

    <pre><code>
    <b>symfony console make:user</b>

    The name of the security user class (e.g. User) [User]:
    &gt;
    Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
    &gt;

    Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
    &gt;

    Will this app need to hash/check user passwords?
    Choose No if passwords are not needed

    Does this app need to hash/check user passwords? (yes/no) [yes]:
    &gt;

    created: src/Entity/User.php
    created: src/Repository/UserRepository.php
    updated: src/Entity/User.php
    updated: config/packages/security.yaml
    </code></pre>

    <p>On garde le nom par défaut de l'entité que l'on nomme <b>User</b>, puis on détermine que la propriété <b>email</b> est <b>unique</b>, enfin, on active le <b>hashage</b> du mot passe que <b>Symfony</b> effectuera avec le meilleur algorithme disponible avec votre version de <b><abbr title="Hypertext Preprocessor">PHP</abbr></b>.</p>

    <p>L'entité <b>User</b> et son repository sont créés, et le fichier <b>security.yaml</b> est mis à jour en ajoutant les lignes de code permettant d'encoder le mot de passe :</p>

    <pre><code>
    <b>config/packages/security.yaml</b>

    security:
    encoders:
        App\Entity\User:
            algorithm: auto <b>// Choix automatique du meilleur algorithme</b>

    // ...
    </code></pre>

    <p>Une fois cette opération terminée, il convient de lancer la migration avec les commandes habituelles : <kbd>symfony console make:migration</kbd> et <kbd>symfony console d:m:m</kbd>.<br>Si tout c'est bien passé, une nouvelle table vide nommée <b>user</b> est créée dans notre base de données.</p>

    <h3>Création du "Guard authenticator"</h3>

    <p>Grâce à la commande <kbd>symfony console make:auth</kbd>, on met en place de manière simple le système d'authentification :</p>

    <pre><code>
    <b>symfony console make:auth</b>

    What style of authentication do you want? [Empty authenticator]:
    [0] Empty authenticator
    [1] Login form authenticator
    > 1 <b>// On choisi le style traditionnel d'authentification via un formulaire de login</b>

    The class name of the authenticator to create (e.g. AppCustomAuthenticator):
    > LoginFormAuthenticator <b>// Nom de notre classe d'authentitfication</b>

    Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
    > <b>// Pour le nom du contrôleur de sécurité, on garde celui par défaut</b>

    Do you want to generate a '/logout' URL? (yes/no) [yes]:
    > <b>// Par défaut on crée la route pour se déloguer</b>

    created: src/Security/LoginFormAuthenticator.php
    updated: config/packages/security.yaml
    created: src/Controller/SecurityController.php
    created: templates/security/login.html.twig

    Success!

    Next:
    - Customize your new authenticator.
    - Finish the redirect "TODO" in the App\Security\LoginFormAuthenticator::onAuthenticationSuccess() method.
    - Review & adapt the login template: templates/security/login.html.twig.
    </code></pre>

    <p>Une fois la commande executée, on personnalise la route pour rediriger l'utilisateur dans le cas où l'authentification à réussi, et que la réference de la page protégée à laquelle il voulait accéder (referrer) n'existe pas :</p>

    <pre><code>
    <b>src/Security/LoginFormAuthenticator.php</b>

    // ...

    class LoginFormAuthenticator extends AbstractFormLoginAuthenticator implements PasswordAuthenticatedInterface
    &#123;
     // ...

        <b>// Si l'authentification a fonctionné</b>
        public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $providerKey)
        &#123;
            <b>// On renvoie l'utilisateur identifié vers la page protégée à laquelle il voulait accéder</b>
            if ($targetPath = $this-&gt;getTargetPath($request-&gt;getSession(), $providerKey)) &#123;
                return new RedirectResponse($targetPath);
            &#125;

            <b>// Sinon, on redirige l'utilisateur vers la page d'accueil si la référence de la page est nulle</b>
            <b>return new RedirectResponse($this-&gt;urlGenerator-&gt;generate('index'));</b>
        &#125;

        protected function getLoginUrl()
        &#123;
            return $this-&gt;urlGenerator-&gt;generate(self::LOGIN_ROUTE);
        &#125;
    &#125;
    </code></pre>

    <p>Le fichier <b>security.yaml</b> est configuré automatiquement pour y indiquer que la classe <b>LoginFormAuthenticator</b> gère l'authentification :</p>

    <pre><code>
    <b>config/packages/security.yaml</b>

    // ...

    guard:
        authenticators:
            - App\Security\LoginFormAuthenticator

    // ...
    </code></pre>

    <p>Le <b>SecurityController</b> (src/Controller/SecurityController.php) permet de gérer la <b>connexion</b> et la <b>déconnexion</b>.<br>La méthode <b>login</b> de ce contrôleur nous dirige vers le formulaire d'identification <b>login.html.twig</b> que nous devons adapter et traduire en français :</p>

    <pre><code>
    <b>templates/security/login.html.twig</b>

    &#123;# ... #&#125;

    &#123;% block main %&#125;
    &lt;form method="post"&gt;
        &#123;% if error %&#125;
            &lt;div class="alert alert-danger"&gt;&#123;&#123; error.messageKey|trans(error.messageData, 'security') &#125;&#125;&lt;/div&gt;
        &#123;% endif %&#125;

        &#123;% if app.user %&#125;
            &lt;div class="mb-3"&gt;
                Bonjour &#123;&#123; app.user.username &#125;&#125;, &lt;a href="&#123;&#123; path('app_logout') &#125;&#125;"&gt;Se déconnecter&lt;/a&gt;
            &lt;/div&gt;
        &#123;% endif %&#125;

        &lt;h1 class="h3 mb-3 font-weight-normal"&gt;Merci de vous identifier&lt;/h1&gt;

        &lt;div class="form-group"&gt;
            &lt;label for="inputEmail"&gt;Email&lt;/label&gt;
            &lt;input type="email" value="&#123;&#123; last_username &#125;&#125;" name="email" id="inputEmail" class="form-control" required autofocus&gt;
        &lt;/div&gt;

        &lt;div class="form-group"&gt;
            &lt;label for="inputPassword"&gt;Mot de Passe&lt;/label&gt;
            &lt;input type="password" name="password" id="inputPassword" class="form-control" required&gt;
        &lt;/div&gt;

        &lt;input type="hidden" name="_csrf_token"
               value="&#123;&#123; csrf_token('authenticate') &#125;&#125;"
        &gt;

        &#123;#
            Uncomment this section and add a remember_me option below your firewall to activate remember me functionality.
            See https://symfony.com/doc/current/security/remember_me.html

            &lt;div class="checkbox mb-3"&gt;
                &lt;label&gt;
                    &lt;input type="checkbox" name="_remember_me"&gt; Remember me
                &lt;/label&gt;
            &lt;/div&gt;
        #&#125;

        &lt;button class="btn btn-lg btn-primary" type="submit"&gt;
            S'identifier
        &lt;/button&gt;
    &lt;/form&gt;
    &#123;% endblock %&#125;
    </code></pre>

    <p>Après avoir traduction de celui-ci en français, celui-ci est visible à l'adresse <b><a href="{{ path('app_login') }}">{{ app.request.server.get('SYMFONY_DEFAULT_ROUTE_URL')|trim('/') ~ path('app_login')}}</a></b> :</p>

    <div class="text-center my-5"><img src="{{ asset('images/auth_1.png') }}" alt="Formulaire de login" class="img-fluid"></div>

    <h2>Créer un utilisateur manuellement</h2>

    <p>Maintenant que notre système d'authentification est mis en place, nous allons créer manuellement un premier utilisateur avec le <b>rôle admin</b>.</p>

    <p>Les données donc nous avons besoin sont les suivantes :</p>

    <ul>
        <li>L'email : <b>admin@email.fr</b></li>
        <li>Le rôle : <b>[ROLE_ADMIN]</b></li>
        <li>Le mot de passe : <b>admin</b></li>
    </ul>

    <p>Avant d'insérer ces données dans la base, il faut <b>sérialiser le rôle</b> en json de la manière suivante : <code>{"role":"ROLE_ADMIN"}</code>, et il faut <b>hasher le mot de passe</b> avec l'algorithme <b>ARGON2I</b> via la ligne de commande suivante :</p>

    <pre><code>
    // Ligne de commande
    php -r "echo password_hash('<b>admin</b>', PASSWORD_ARGON2I) . PHP_EOL;"
    // Résultat
    <b>$argon2i$v=19$m=65536,t=4,p=1$d3BkUWxDaUt4Znd5RXQ2RQ$nTJvJOA41LHQfLKlh8KgCpqChwiPm3ABeLSl8cODqUM</b>
    </code></pre>

    <p>ou encore mieux :</p>

    <pre><code>
    // Ligne de commande
    symfony console security:encode-password

    Symfony Password Encoder Utility
    ================================

    Type in your password to be encoded:
    &gt;

    ------------------ ---------------------------------------------------------------------------------------------------
    Key                Value
    ------------------ ---------------------------------------------------------------------------------------------------
    Encoder used       Symfony\Component\Security\Core\Encoder\MigratingPasswordEncoder
    Encoded password   <b>$argon2id$v=19$m=65536,t=4,p=1$yq3Yy8GEzOBUc3SiJ41D0w$9MPywxWA/2iuN+4dAZC8gQEUliYNuf/H7bGS//qyeZc</b>
    ------------------ ---------------------------------------------------------------------------------------------------

    ! [NOTE] Self-salting encoder used: the encoder generated its own built-in salt.


    [OK] Password encoding succeeded
    </code></pre>

    <p class="alert alert-warning">Si on teste la <b>commande de hashage</b> plusieurs fois sur la <b>même chaîne de caractères</b>, il est tout à fait normal que le <b>résultat final diffère</b> à chaque fois.</p>

    <p>Maintenant que nous disposons de tous les éléments correcetment formatés, il ne reste plus qu'à les insérer dans la base avec une requête <abbr title="Search Query Language">SQL</abbr> en ligne de commande via <b>Doctrine</b> :</p>

    <pre><code>
    symfony console doctrine:query:sql "INSERT INTO user (email, roles, password) VALUES ('admin@email.fr','{\"role\":\"ROLE_ADMIN\"}','$argon2i$v=19$m=65536,t=4,p=1$d3BkUWxDaUt4Znd5RXQ2RQ$nTJvJOA41LHQfLKlh8KgCpqChwiPm3ABeLSl8cODqUM')"
    </code></pre>

    <p>Pour s'assurer que tous c'est bien passé, on peut exécuter la requête suivante :</p>

    <pre><code>
    symfony console doctrine:query:sql "SELECT * FROM user"
    array(1) {
      [0]=>
      array(4) {
        ["id"]=>
        string(1) "1"
        ["email"]=>
        string(14) "admin@email.fr"
        ["roles"]=>
        string(21) "{"role":"ROLE_ADMIN"}"
        ["password"]=>
        string(96) "$argon2i$v=19$m=65536,t=4,p=1$d3BkUWxDaUt4Znd5RXQ2RQ$nTJvJOA41LHQfLKlh8KgCpqChwiPm3ABeLSl8cODqUM"
      }
    }
    </code></pre>

    <p>Maintenant si l'on se rend sur la page <b><a href="{{ path('app_login') }}">{{ app.request.server.get('SYMFONY_DEFAULT_ROUTE_URL')|trim('/') ~ path('app_login')}}</a></b> et qu'on y saisie les identifiants <b>admin@email.fr / admin</b>, voilà ce qu'on pourra voir dans la barre d'outil de symfony :</p>

    <p>On notre que la section "user" de la barre d'outils donne accès au lien pour se <a href="{{ path('app_logout') }}">déloguer</a>.</p>

    <div class="text-center my-5"><img src="{{ asset('images/auth_2.png') }}" alt="Information sur l'utilisateur identifié dans la debug toolbar" class="img-fluid"></div>

    <p>Par comparaison, on constate que lorsque l'on est <b>pas logué</b>, on est authentifié en tant qu'<b>utilisateur anonyme</b> par défaut.</p>

    <h2>Mettre en place le contrôle d'accès (Autorisation)</h2>

    <p>Maintenant que notre utilisateur avec le rôle admin est authentifié, il est temps de créer l'<b><a href="{{ path('admin') }}">espace administrateur</a></b> qui ne sera accessible que par lui.</p>

    <h3>Création de l'espace administrateur</h3>

    <p>La première tâche consiste à créer l'<b>AdminController</b> grâce à la commande <kbd>symfony console make:controller AdminController</kbd></p>

    <p>Cette commande crée tout à la fois l'ébauche de notre <b>contrôleur</b> et celle de du <b>template twig</b> que nous modifions de la manière suivante :</p>

    <pre><code>
    <b>src/Controller/AdminController</b>

    class AdminController extends AbstractController
    {
        // ...

        /**
         * @Route("/admin", name="admin")
         */
        public function index()
        {
            return $this->render('admin/index.html.twig', [ ... ]);
        }
    }
    </code></pre>

    <pre><code>
    <b>termplates/admin/index.html.twig</b>

    &#123;% extends 'base.html.twig' %&#125;

    &#123;% block title %&#125;Section administrateur&#123;% endblock %&#125;

    &#123;% block breadcrumb %&#125;&#123;% endblock %&#125; &#123;# pas de breadcrumbs #&#125;

    &#123;% block main %&#125;
        &lt;div class="alert alert-secondary" role="alert"&gt;
            Bienvenue &lt;b&gt;&#123;&#123; app.user.email &#125;&#125;&lt;/b&gt;  | &lt;a href="&#123;&#123; path('app_logout') &#125;&#125;"&gt;Se déloguer&lt;/a&gt;
        &lt;/div&gt;

        &lt;h1&gt;Section administrateur&lt;/h1&gt;
    &#123;% endblock %&#125;
    </code></pre>

    <h3>Resteindre l'accès à l'administrateur</h3>

    <p>Maintenant que la page <b>"Admin"</b> est créée, il faut en restreindre l'accès aux utilisateurs ayant le <b>rôle admin</b>, et pour ce faire il suffit de dé-commenter la ligne <code>- { path: ^/admin, roles: ROLE_ADMIN }</code> dans la section <b>access_control</b> du fichier <b>security.yaml</b> :</p>

    <pre><code>
    <b>config/packages/security.yaml</b>

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - &#123; path: ^/admin, roles: ROLE_ADMIN &#125; <b># Ligne à décommenter</b>
        # - &#123; path: ^/profile, roles: ROLE_USER &#125;
    </code></pre>

    <p>On constate que la syntaxe pour restreindre l'accès à une page, ou à un groupe de page, consiste à spécifier la <b>chemin</b> et le <b>rôle</b>.<br>Si on voulait restreindre l'accès de la section <b>Formulaires</b> aux utilisateurs ayant le <b>rôle user</b>, il suffirait d'ajouter la ligne : <code>- { path: ^/form, roles: ROLE_USER }</code>.</p>

    <p>Alternativement, on peut restreindre l'accès avec une annotation de type <b>Security</b> :</p>

    <pre><code>
    <b>src/Controller/AdminController</b>

    <b>use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;</b>

    // ...

    class AdminController extends AbstractController
    &#123;
        // ...

        /**
         * @Route("/admin", name="admin")
         <b>* @Security("is_granted('ROLE_ADMIN')")</b>
         */
        public function index()
        &#123;
            return $this-&gt;render('admin/index.html.twig');
        &#125;
    &#125;
    </code></pre>

    <p class="alert alert-warning">Un utilisateur ayant le <b>ROLE_ADMIN</b> dispose également du <b>ROLE_USER</b> qui lui est hiérarchiquement inférieur.</p>

    <p>Désormais, si on essaye de se connecter à l'<a href="{{ path('admin') }}">espace admin</a> sans être logué, on est automatiquement redirigé vers le formulaire de connexion, et si le couple <b>email + mot de passe</b> est correct, on arrive sur cette page :</p>

    <div class="text-center my-5"><img src="{{ asset('images/auth_3.png') }}" alt="Page admin" class="img-fluid"></div>

    <p class="alert alert-primary"><i class="fa fa-paperclip"></i> Toutes ces informations sont présentées dans la <a href="https://symfony.com/doc/current/security.html" target="_blank">section sécurité</a> du site Symfony.</p>
{% endblock %}


